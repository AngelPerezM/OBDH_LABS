--  Body file for function LEDs
--  Generated by TASTE on 2022-05-26 10:39:07
--  You can edit this file, it will not be overwritten
--  Provided interfaces : Blink_LED
--  Required interfaces : 
--  Timers              : 

with STM32.Device;  use STM32.Device;
with STM32.GPIO;    use STM32.GPIO;

package body Leds is

   Green_LED  : GPIO_Point renames PD12;
   Orange_LED : GPIO_Point renames PD13;
   Red_LED    : GPIO_Point renames PD14;
   Blue_LED   : GPIO_Point renames PD15;
   
   All_LEDs : array (asn1SccLed) of GPIO_Point :=
     (asn1Sccorange_led => Orange_LED,
      asn1Sccred_led    => Red_LED,
      asn1Sccblue_led   => Blue_LED,
      asn1Sccgreen_led  => Green_LED);
   
   -- Auxiliary procedures:
   
   procedure Initialize_LEDs;
   
   -- PIs implementation:
   
   ----------------
   -- Toggle_Led --
   ----------------
   procedure Toggle_Led (Led : in out asn1SccLed) is
   begin
      Toggle(All_LEDs(Led));
   end Toggle_Led;

   ---------------
   -- Clear_Led --
   ---------------
   procedure Clear_Led (Led : in out asn1SccLed) is
   begin
      Clear(All_LEDs(Led));
   end Clear_Led;   

   -------------
   -- Set_Led --
   -------------
   procedure Set_Led (Led : in out asn1SccLed) is
   begin
      Set(All_LEDs(Led));
   end Set_Led;

   ---------------------
   -- Initialize_LEDS --
   ---------------------
   
   --  @brief Enable the clock for the four LEDs and configure them as outputs.
   --  Note there is a procedure defined in STM32.Board to do this. We do it here
   --  to demonstrate the use of the GPIO interface.
   procedure Initialize_LEDs is
   begin
      Enable_Clock (GPIO_D);
      
      for Led of All_LEDs loop
         Configure_IO
           (Led, (Mode        => Mode_Out,
                  Resistors   => Floating,
                  Speed       => Speed_100MHz,
                  Output_Type => Push_Pull));
      end loop;
      
   end Initialize_LEDs;
   
begin
   
   Initialize_LEDs;

end Leds;

