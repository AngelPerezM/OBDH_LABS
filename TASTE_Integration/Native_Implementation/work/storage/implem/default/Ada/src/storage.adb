--  Body file for function Storage
--  Generated by TASTE on 2022-02-14 23:19:23
--  You can edit this file, it will not be overwritten
--  Provided interfaces : Get, Put
--  Required interfaces : 
--  Timers              : 

--  Include Context Parameters (constants defined in the Interface View)
--  with Context_Storage; use Context_Storage; --  Use: storage_ctxt

with Ada.Text_IO;       use Ada.Text_IO;

package body Storage is

   Box_Capacity : constant Positive := 5;
   type Index is mod Box_Capacity;
   type Store is array (Index) of asn1SccSatellite_State;
   
   Box      : Store;
   Next_In  : Index   := 0; --  next new item
   Last_In  : Index   := 0; --  newest item in buffer
   Next_Out : Index   := 0; --  oldest item in buffer
   Count    : Natural := 0; --  # elements in buffer
   
   -------------------------
   -- Private subprograms --
   -------------------------
   
   function Is_Empty return Boolean is
   begin
      return Count = 0;
   end Is_Empty;
   
   function Is_Full return Boolean is
   begin
      return Count >= Box_Capacity;
   end Is_Full;
   
   function Last return asn1SccSatellite_State is
   begin
      return Box (Last_In);
   end Last;

   
   ------------------------------
   -- Public subprograms (PIs) --
   ------------------------------

   procedure Get (Out_Data : out asn1SccSatellite_State) is
   begin
      if not Is_Empty then
         Out_Data := Box (Next_Out);
         Next_Out := Next_Out + 1;
         Count    := Count - 1;
      end if;
   end Get;
   
   
   procedure Put (In_Data : in out asn1SccSatellite_State) is
   begin
      Box (Next_In) := In_Data;
      Last_In := Next_In;
      Next_In := Next_In + 1;
      if not Is_Full then
         Count := Count + 1;
      end if;
   end Put;

begin
   
   Put_Line("[Storage] Initialized.");

end Storage;

