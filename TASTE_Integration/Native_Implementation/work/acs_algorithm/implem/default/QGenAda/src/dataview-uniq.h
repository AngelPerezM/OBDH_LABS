#ifndef GENERATED_ASN1SCC_dataview_uniq_H
#define GENERATED_ASN1SCC_dataview_uniq_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1SccUint asn1SccT_UInt16;


void asn1SccT_UInt16_Initialize(asn1SccT_UInt16* pVal);

#define ERR_T_UINT16		1  /**/
flag asn1SccT_UInt16_IsConstraintValid(const asn1SccT_UInt16* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT16		2  /**/
#define asn1SccT_UInt16_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccT_UInt16_REQUIRED_BITS_FOR_ENCODING        16

flag asn1SccT_UInt16_Encode(const asn1SccT_UInt16* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT16		3  /**/
flag asn1SccT_UInt16_Decode(asn1SccT_UInt16* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_UInt16 asn1SccAnalog_Data;


void asn1SccAnalog_Data_Initialize(asn1SccAnalog_Data* pVal);

#define ERR_ANALOG_DATA_2		91  /**/
flag asn1SccAnalog_Data_IsConstraintValid(const asn1SccAnalog_Data* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_ANALOG_DATA_2		92  /**/
#define asn1SccAnalog_Data_REQUIRED_BYTES_FOR_ENCODING       2 
#define asn1SccAnalog_Data_REQUIRED_BITS_FOR_ENCODING        16

flag asn1SccAnalog_Data_Encode(const asn1SccAnalog_Data* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ANALOG_DATA_2		93  /**/
flag asn1SccAnalog_Data_Decode(asn1SccAnalog_Data* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccAnalog_Data_Table --------------------------------------------*/
typedef struct {
    asn1SccT_UInt16 obc_t;
    asn1SccT_UInt16 obc_v;

} asn1SccAnalog_Data_Table;

void asn1SccAnalog_Data_Table_Initialize(asn1SccAnalog_Data_Table* pVal);

#define ERR_ANALOG_DATA_TABLE		126  /**/
#define ERR_ANALOG_DATA_TABLE_OBC_T_2_2		106  /**/
#define ERR_ANALOG_DATA_TABLE_OBC_V_2_2		121  /**/
flag asn1SccAnalog_Data_Table_IsConstraintValid(const asn1SccAnalog_Data_Table* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_ANALOG_DATA_TABLE		127  /**/
#define ERR_UPER_ENCODE_ANALOG_DATA_TABLE_OBC_T_2_2		107  /**/
#define ERR_UPER_ENCODE_ANALOG_DATA_TABLE_OBC_V_2_2		122  /**/
#define asn1SccAnalog_Data_Table_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccAnalog_Data_Table_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccAnalog_Data_Table_Encode(const asn1SccAnalog_Data_Table* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_ANALOG_DATA_TABLE		128  /**/
#define ERR_UPER_DECODE_ANALOG_DATA_TABLE_OBC_T_2_2		108  /**/
#define ERR_UPER_DECODE_ANALOG_DATA_TABLE_OBC_V_2_2		123  /**/
flag asn1SccAnalog_Data_Table_Decode(asn1SccAnalog_Data_Table* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt64;


void asn1SccT_UInt64_Initialize(asn1SccT_UInt64* pVal);

#define ERR_T_UINT64		6  /**/
flag asn1SccT_UInt64_IsConstraintValid(const asn1SccT_UInt64* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT64		7  /**/
#define asn1SccT_UInt64_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_UInt64_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_UInt64_Encode(const asn1SccT_UInt64* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT64		8  /**/
flag asn1SccT_UInt64_Decode(asn1SccT_UInt64* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccT_UInt64 asn1SccMission_Time;


void asn1SccMission_Time_Initialize(asn1SccMission_Time* pVal);

#define ERR_MISSION_TIME_2		21  /**/
flag asn1SccMission_Time_IsConstraintValid(const asn1SccMission_Time* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_MISSION_TIME_2		22  /**/
#define asn1SccMission_Time_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccMission_Time_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccMission_Time_Encode(const asn1SccMission_Time* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MISSION_TIME_2		23  /**/
flag asn1SccMission_Time_Decode(asn1SccMission_Time* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccSatellite_State --------------------------------------------*/
typedef struct {
    asn1SccT_UInt64 timestamp;
    asn1SccAnalog_Data_Table data;

} asn1SccSatellite_State;

void asn1SccSatellite_State_Initialize(asn1SccSatellite_State* pVal);

#define ERR_SATELLITE_STATE		186  /**/
#define ERR_SATELLITE_STATE_TIMESTAMP_2_2		141  /**/
#define ERR_SATELLITE_STATE_DATA_2		181  /**/
flag asn1SccSatellite_State_IsConstraintValid(const asn1SccSatellite_State* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SATELLITE_STATE		187  /**/
#define ERR_UPER_ENCODE_SATELLITE_STATE_TIMESTAMP_2_2		142  /**/
#define ERR_UPER_ENCODE_SATELLITE_STATE_DATA_2		182  /**/
#define asn1SccSatellite_State_REQUIRED_BYTES_FOR_ENCODING       8 
#define asn1SccSatellite_State_REQUIRED_BITS_FOR_ENCODING        64

flag asn1SccSatellite_State_Encode(const asn1SccSatellite_State* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SATELLITE_STATE		188  /**/
#define ERR_UPER_DECODE_SATELLITE_STATE_TIMESTAMP_2_2		143  /**/
#define ERR_UPER_DECODE_SATELLITE_STATE_DATA_2		183  /**/
flag asn1SccSatellite_State_Decode(asn1SccSatellite_State* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccTM_Hello --------------------------------------------*/
typedef struct {
    asn1SccT_UInt64 tm_timestamp;
    asn1SccSatellite_State tm_payload;

} asn1SccTM_Hello;

void asn1SccTM_Hello_Initialize(asn1SccTM_Hello* pVal);

#define ERR_TM_HELLO		281  /**/
#define ERR_TM_HELLO_TM_TIMESTAMP_2_2		211  /**/
#define ERR_TM_HELLO_TM_PAYLOAD_2		276  /**/
flag asn1SccTM_Hello_IsConstraintValid(const asn1SccTM_Hello* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TM_HELLO		282  /**/
#define ERR_UPER_ENCODE_TM_HELLO_TM_TIMESTAMP_2_2		212  /**/
#define ERR_UPER_ENCODE_TM_HELLO_TM_PAYLOAD_2		277  /**/
#define asn1SccTM_Hello_REQUIRED_BYTES_FOR_ENCODING       12 
#define asn1SccTM_Hello_REQUIRED_BITS_FOR_ENCODING        96

flag asn1SccTM_Hello_Encode(const asn1SccTM_Hello* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TM_HELLO		283  /**/
#define ERR_UPER_DECODE_TM_HELLO_TM_TIMESTAMP_2_2		213  /**/
#define ERR_UPER_DECODE_TM_HELLO_TM_PAYLOAD_2		278  /**/
flag asn1SccTM_Hello_Decode(asn1SccTM_Hello* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    
    asn1SccSatellite_State arr[4];
} asn1SccTM_Housekeeping_Contents;

void asn1SccTM_Housekeeping_Contents_Initialize(asn1SccTM_Housekeeping_Contents* pVal);

#define ERR_TM_HOUSEKEEPING_CONTENTS		351  /**/
#define ERR_TM_HOUSEKEEPING_CONTENTS_ELM_2		346  /**/
flag asn1SccTM_Housekeeping_Contents_IsConstraintValid(const asn1SccTM_Housekeeping_Contents* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TM_HOUSEKEEPING_CONTENTS		352  /**/
#define ERR_UPER_ENCODE_TM_HOUSEKEEPING_CONTENTS_ELM_2		347  /**/
#define asn1SccTM_Housekeeping_Contents_REQUIRED_BYTES_FOR_ENCODING       32 
#define asn1SccTM_Housekeeping_Contents_REQUIRED_BITS_FOR_ENCODING        256

flag asn1SccTM_Housekeeping_Contents_Encode(const asn1SccTM_Housekeeping_Contents* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TM_HOUSEKEEPING_CONTENTS		353  /**/
#define ERR_UPER_DECODE_TM_HOUSEKEEPING_CONTENTS_ELM_2		348  /**/
flag asn1SccTM_Housekeeping_Contents_Decode(asn1SccTM_Housekeeping_Contents* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccTM_Housekeeping --------------------------------------------*/
typedef struct {
    asn1SccT_UInt64 tm_timestamp;
    asn1SccTM_Housekeeping_Contents tm_payload;

} asn1SccTM_Housekeeping;

void asn1SccTM_Housekeeping_Initialize(asn1SccTM_Housekeeping* pVal);

#define ERR_TM_HOUSEKEEPING		446  /**/
#define ERR_TM_HOUSEKEEPING_TM_TIMESTAMP_2_2		366  /**/
#define ERR_TM_HOUSEKEEPING_TM_PAYLOAD_2		441  /**/
flag asn1SccTM_Housekeeping_IsConstraintValid(const asn1SccTM_Housekeeping* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TM_HOUSEKEEPING		447  /**/
#define ERR_UPER_ENCODE_TM_HOUSEKEEPING_TM_TIMESTAMP_2_2		367  /**/
#define ERR_UPER_ENCODE_TM_HOUSEKEEPING_TM_PAYLOAD_2		442  /**/
#define asn1SccTM_Housekeeping_REQUIRED_BYTES_FOR_ENCODING       36 
#define asn1SccTM_Housekeeping_REQUIRED_BITS_FOR_ENCODING        288

flag asn1SccTM_Housekeeping_Encode(const asn1SccTM_Housekeeping* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TM_HOUSEKEEPING		448  /**/
#define ERR_UPER_DECODE_TM_HOUSEKEEPING_TM_TIMESTAMP_2_2		368  /**/
#define ERR_UPER_DECODE_TM_HOUSEKEEPING_TM_PAYLOAD_2		443  /**/
flag asn1SccTM_Housekeeping_Decode(asn1SccTM_Housekeeping* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1Real asn1SccT_Float;


void asn1SccT_Float_Initialize(asn1SccT_Float* pVal);

#define ERR_T_FLOAT		11  /**/
flag asn1SccT_Float_IsConstraintValid(const asn1SccT_Float* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_FLOAT		12  /**/
#define asn1SccT_Float_REQUIRED_BYTES_FOR_ENCODING       13 
#define asn1SccT_Float_REQUIRED_BITS_FOR_ENCODING        104

flag asn1SccT_Float_Encode(const asn1SccT_Float* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_FLOAT		13  /**/
flag asn1SccT_Float_Decode(asn1SccT_Float* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    
    asn1SccT_Float arr[15];
} asn1SccT_B_b_T;

void asn1SccT_B_b_T_Initialize(asn1SccT_B_b_T* pVal);

#define ERR_T_B_B_T		36  /**/
#define ERR_T_B_B_T_ELM_2		31  /**/
flag asn1SccT_B_b_T_IsConstraintValid(const asn1SccT_B_b_T* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_B_B_T		37  /**/
#define ERR_UPER_ENCODE_T_B_B_T_ELM_2		32  /**/
#define asn1SccT_B_b_T_REQUIRED_BYTES_FOR_ENCODING       195 
#define asn1SccT_B_b_T_REQUIRED_BITS_FOR_ENCODING        1560

flag asn1SccT_B_b_T_Encode(const asn1SccT_B_b_T* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_B_B_T		38  /**/
#define ERR_UPER_DECODE_T_B_B_T_ELM_2		33  /**/
flag asn1SccT_B_b_T_Decode(asn1SccT_B_b_T* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    
    asn1SccT_Float arr[3];
} asn1SccT_Omega;

void asn1SccT_Omega_Initialize(asn1SccT_Omega* pVal);

#define ERR_T_OMEGA		51  /**/
#define ERR_T_OMEGA_ELM_2		46  /**/
flag asn1SccT_Omega_IsConstraintValid(const asn1SccT_Omega* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_OMEGA		52  /**/
#define ERR_UPER_ENCODE_T_OMEGA_ELM_2		47  /**/
#define asn1SccT_Omega_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccT_Omega_REQUIRED_BITS_FOR_ENCODING        312

flag asn1SccT_Omega_Encode(const asn1SccT_Omega* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_OMEGA		53  /**/
#define ERR_UPER_DECODE_T_OMEGA_ELM_2		48  /**/
flag asn1SccT_Omega_Decode(asn1SccT_Omega* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    
    asn1SccT_Float arr[3];
} asn1SccT_MT_Working;

void asn1SccT_MT_Working_Initialize(asn1SccT_MT_Working* pVal);

#define ERR_T_MT_WORKING		66  /**/
#define ERR_T_MT_WORKING_ELM_2		61  /**/
flag asn1SccT_MT_Working_IsConstraintValid(const asn1SccT_MT_Working* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_MT_WORKING		67  /**/
#define ERR_UPER_ENCODE_T_MT_WORKING_ELM_2		62  /**/
#define asn1SccT_MT_Working_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccT_MT_Working_REQUIRED_BITS_FOR_ENCODING        312

flag asn1SccT_MT_Working_Encode(const asn1SccT_MT_Working* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_MT_WORKING		68  /**/
#define ERR_UPER_DECODE_T_MT_WORKING_ELM_2		63  /**/
flag asn1SccT_MT_Working_Decode(asn1SccT_MT_Working* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    
    asn1SccT_Float arr[3];
} asn1SccT_Control;

void asn1SccT_Control_Initialize(asn1SccT_Control* pVal);

#define ERR_T_CONTROL		81  /**/
#define ERR_T_CONTROL_ELM_2		76  /**/
flag asn1SccT_Control_IsConstraintValid(const asn1SccT_Control* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_CONTROL		82  /**/
#define ERR_UPER_ENCODE_T_CONTROL_ELM_2		77  /**/
#define asn1SccT_Control_REQUIRED_BYTES_FOR_ENCODING       39 
#define asn1SccT_Control_REQUIRED_BITS_FOR_ENCODING        312

flag asn1SccT_Control_Encode(const asn1SccT_Control* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_CONTROL		83  /**/
#define ERR_UPER_DECODE_T_CONTROL_ELM_2		78  /**/
flag asn1SccT_Control_Decode(asn1SccT_Control* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccFormatted_Data_Table --------------------------------------------*/
typedef struct {
    asn1SccT_Float obc_t;
    asn1SccT_Float obc_v;

} asn1SccFormatted_Data_Table;

void asn1SccFormatted_Data_Table_Initialize(asn1SccFormatted_Data_Table* pVal);

#define ERR_FORMATTED_DATA_TABLE		801  /**/
#define ERR_FORMATTED_DATA_TABLE_OBC_T_2		786  /**/
#define ERR_FORMATTED_DATA_TABLE_OBC_V_2		796  /**/
flag asn1SccFormatted_Data_Table_IsConstraintValid(const asn1SccFormatted_Data_Table* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_FORMATTED_DATA_TABLE		802  /**/
#define ERR_UPER_ENCODE_FORMATTED_DATA_TABLE_OBC_T_2		787  /**/
#define ERR_UPER_ENCODE_FORMATTED_DATA_TABLE_OBC_V_2		797  /**/
#define asn1SccFormatted_Data_Table_REQUIRED_BYTES_FOR_ENCODING       26 
#define asn1SccFormatted_Data_Table_REQUIRED_BITS_FOR_ENCODING        208

flag asn1SccFormatted_Data_Table_Encode(const asn1SccFormatted_Data_Table* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_FORMATTED_DATA_TABLE		803  /**/
#define ERR_UPER_DECODE_FORMATTED_DATA_TABLE_OBC_T_2		788  /**/
#define ERR_UPER_DECODE_FORMATTED_DATA_TABLE_OBC_V_2		798  /**/
flag asn1SccFormatted_Data_Table_Decode(asn1SccFormatted_Data_Table* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccSatellite_State_Formatted --------------------------------------------*/
typedef struct {
    int nCount; 
    
    byte arr[80];
} asn1SccSatellite_State_Formatted_timestamp;

typedef struct {
    asn1SccSatellite_State_Formatted_timestamp timestamp;
    asn1SccFormatted_Data_Table data;

} asn1SccSatellite_State_Formatted;

void asn1SccSatellite_State_Formatted_timestamp_Initialize(asn1SccSatellite_State_Formatted_timestamp* pVal);
void asn1SccSatellite_State_Formatted_Initialize(asn1SccSatellite_State_Formatted* pVal);

#define ERR_SATELLITE_STATE_FORMATTED		841  /**/
#define ERR_SATELLITE_STATE_FORMATTED_TIMESTAMP		806  /**/
#define ERR_SATELLITE_STATE_FORMATTED_DATA_2		836  /**/
flag asn1SccSatellite_State_Formatted_IsConstraintValid(const asn1SccSatellite_State_Formatted* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_SATELLITE_STATE_FORMATTED		842  /**/
#define ERR_UPER_ENCODE_SATELLITE_STATE_FORMATTED_TIMESTAMP		807  /**/
#define ERR_UPER_ENCODE_SATELLITE_STATE_FORMATTED_DATA_2		837  /**/
#define asn1SccSatellite_State_Formatted_REQUIRED_BYTES_FOR_ENCODING       107 
#define asn1SccSatellite_State_Formatted_REQUIRED_BITS_FOR_ENCODING        855

flag asn1SccSatellite_State_Formatted_Encode(const asn1SccSatellite_State_Formatted* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_SATELLITE_STATE_FORMATTED		843  /**/
#define ERR_UPER_DECODE_SATELLITE_STATE_FORMATTED_TIMESTAMP		808  /**/
#define ERR_UPER_DECODE_SATELLITE_STATE_FORMATTED_DATA_2		838  /**/
flag asn1SccSatellite_State_Formatted_Decode(asn1SccSatellite_State_Formatted* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccTM_Hello_Formatted --------------------------------------------*/
typedef struct {
    int nCount; 
    
    byte arr[80];
} asn1SccTM_Hello_Formatted_tm_timestamp;

typedef struct {
    asn1SccTM_Hello_Formatted_tm_timestamp tm_timestamp;
    asn1SccSatellite_State_Formatted tm_payload;

} asn1SccTM_Hello_Formatted;

void asn1SccTM_Hello_Formatted_tm_timestamp_Initialize(asn1SccTM_Hello_Formatted_tm_timestamp* pVal);
void asn1SccTM_Hello_Formatted_Initialize(asn1SccTM_Hello_Formatted* pVal);

#define ERR_TM_HELLO_FORMATTED		896  /**/
#define ERR_TM_HELLO_FORMATTED_TM_TIMESTAMP		846  /**/
#define ERR_TM_HELLO_FORMATTED_TM_PAYLOAD_2		891  /**/
flag asn1SccTM_Hello_Formatted_IsConstraintValid(const asn1SccTM_Hello_Formatted* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TM_HELLO_FORMATTED		897  /**/
#define ERR_UPER_ENCODE_TM_HELLO_FORMATTED_TM_TIMESTAMP		847  /**/
#define ERR_UPER_ENCODE_TM_HELLO_FORMATTED_TM_PAYLOAD_2		892  /**/
#define asn1SccTM_Hello_Formatted_REQUIRED_BYTES_FOR_ENCODING       188 
#define asn1SccTM_Hello_Formatted_REQUIRED_BITS_FOR_ENCODING        1502

flag asn1SccTM_Hello_Formatted_Encode(const asn1SccTM_Hello_Formatted* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TM_HELLO_FORMATTED		898  /**/
#define ERR_UPER_DECODE_TM_HELLO_FORMATTED_TM_TIMESTAMP		848  /**/
#define ERR_UPER_DECODE_TM_HELLO_FORMATTED_TM_PAYLOAD_2		893  /**/
flag asn1SccTM_Hello_Formatted_Decode(asn1SccTM_Hello_Formatted* pVal, BitStream* pBitStrm, int* pErrCode);


typedef struct {
    
    asn1SccSatellite_State_Formatted arr[4];
} asn1SccTM_Housekeeping_Formatted_Contents;

void asn1SccTM_Housekeeping_Formatted_Contents_Initialize(asn1SccTM_Housekeeping_Formatted_Contents* pVal);

#define ERR_TM_HOUSEKEEPING_FORMATTED_CONTENTS		946  /**/
#define ERR_TM_HOUSEKEEPING_FORMATTED_CONTENTS_ELM_2		941  /**/
flag asn1SccTM_Housekeeping_Formatted_Contents_IsConstraintValid(const asn1SccTM_Housekeeping_Formatted_Contents* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TM_HOUSEKEEPING_FORMATTED_CONTENTS		947  /**/
#define ERR_UPER_ENCODE_TM_HOUSEKEEPING_FORMATTED_CONTENTS_ELM_2		942  /**/
#define asn1SccTM_Housekeeping_Formatted_Contents_REQUIRED_BYTES_FOR_ENCODING       428 
#define asn1SccTM_Housekeeping_Formatted_Contents_REQUIRED_BITS_FOR_ENCODING        3420

flag asn1SccTM_Housekeeping_Formatted_Contents_Encode(const asn1SccTM_Housekeeping_Formatted_Contents* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TM_HOUSEKEEPING_FORMATTED_CONTENTS		948  /**/
#define ERR_UPER_DECODE_TM_HOUSEKEEPING_FORMATTED_CONTENTS_ELM_2		943  /**/
flag asn1SccTM_Housekeeping_Formatted_Contents_Decode(asn1SccTM_Housekeeping_Formatted_Contents* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccTM_Housekeeping_Formatted --------------------------------------------*/
typedef struct {
    int nCount; 
    
    byte arr[80];
} asn1SccTM_Housekeeping_Formatted_tm_timestamp;

typedef struct {
    asn1SccTM_Housekeeping_Formatted_tm_timestamp tm_timestamp;
    asn1SccTM_Housekeeping_Formatted_Contents tm_payload;

} asn1SccTM_Housekeeping_Formatted;

void asn1SccTM_Housekeeping_Formatted_tm_timestamp_Initialize(asn1SccTM_Housekeeping_Formatted_tm_timestamp* pVal);
void asn1SccTM_Housekeeping_Formatted_Initialize(asn1SccTM_Housekeeping_Formatted* pVal);

#define ERR_TM_HOUSEKEEPING_FORMATTED		1011  /**/
#define ERR_TM_HOUSEKEEPING_FORMATTED_TM_TIMESTAMP		951  /**/
#define ERR_TM_HOUSEKEEPING_FORMATTED_TM_PAYLOAD_2		1006  /**/
flag asn1SccTM_Housekeeping_Formatted_IsConstraintValid(const asn1SccTM_Housekeeping_Formatted* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TM_HOUSEKEEPING_FORMATTED		1012  /**/
#define ERR_UPER_ENCODE_TM_HOUSEKEEPING_FORMATTED_TM_TIMESTAMP		952  /**/
#define ERR_UPER_ENCODE_TM_HOUSEKEEPING_FORMATTED_TM_PAYLOAD_2		1007  /**/
#define asn1SccTM_Housekeeping_Formatted_REQUIRED_BYTES_FOR_ENCODING       509 
#define asn1SccTM_Housekeeping_Formatted_REQUIRED_BITS_FOR_ENCODING        4067

flag asn1SccTM_Housekeeping_Formatted_Encode(const asn1SccTM_Housekeeping_Formatted* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TM_HOUSEKEEPING_FORMATTED		1013  /**/
#define ERR_UPER_DECODE_TM_HOUSEKEEPING_FORMATTED_TM_TIMESTAMP		953  /**/
#define ERR_UPER_DECODE_TM_HOUSEKEEPING_FORMATTED_TM_PAYLOAD_2		1008  /**/
flag asn1SccTM_Housekeeping_Formatted_Decode(asn1SccTM_Housekeeping_Formatted* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    asn1Sccidle = 0,
    asn1Scccoverage = 1
} asn1SccOperating_Mode;

// please use the following macros to avoid breaking code.
#define asn1SccOperating_Mode_idle asn1Sccidle
#define asn1SccOperating_Mode_coverage asn1Scccoverage

void asn1SccOperating_Mode_Initialize(asn1SccOperating_Mode* pVal);

#define ERR_OPERATING_MODE		191  /**/
flag asn1SccOperating_Mode_IsConstraintValid(const asn1SccOperating_Mode* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_OPERATING_MODE		192  /**/
#define asn1SccOperating_Mode_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccOperating_Mode_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccOperating_Mode_Encode(const asn1SccOperating_Mode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_OPERATING_MODE		193  /**/
flag asn1SccOperating_Mode_Decode(asn1SccOperating_Mode* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccTM_Mode --------------------------------------------*/
typedef struct {
    asn1SccT_UInt64 tm_timestamp;
    asn1SccOperating_Mode tm_payload;

} asn1SccTM_Mode;

void asn1SccTM_Mode_Initialize(asn1SccTM_Mode* pVal);

#define ERR_TM_MODE		476  /**/
#define ERR_TM_MODE_TM_TIMESTAMP_2_2		461  /**/
#define ERR_TM_MODE_TM_PAYLOAD_2		471  /**/
flag asn1SccTM_Mode_IsConstraintValid(const asn1SccTM_Mode* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TM_MODE		477  /**/
#define ERR_UPER_ENCODE_TM_MODE_TM_TIMESTAMP_2_2		462  /**/
#define ERR_UPER_ENCODE_TM_MODE_TM_PAYLOAD_2		472  /**/
#define asn1SccTM_Mode_REQUIRED_BYTES_FOR_ENCODING       5 
#define asn1SccTM_Mode_REQUIRED_BITS_FOR_ENCODING        33

flag asn1SccTM_Mode_Encode(const asn1SccTM_Mode* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TM_MODE		478  /**/
#define ERR_UPER_DECODE_TM_MODE_TM_TIMESTAMP_2_2		463  /**/
#define ERR_UPER_DECODE_TM_MODE_TM_PAYLOAD_2		473  /**/
flag asn1SccTM_Mode_Decode(asn1SccTM_Mode* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccTM_Mode_Formatted --------------------------------------------*/
typedef struct {
    int nCount; 
    
    byte arr[80];
} asn1SccTM_Mode_Formatted_tm_timestamp;

typedef struct {
    asn1SccTM_Mode_Formatted_tm_timestamp tm_timestamp;
    asn1SccOperating_Mode tm_payload;

} asn1SccTM_Mode_Formatted;

void asn1SccTM_Mode_Formatted_tm_timestamp_Initialize(asn1SccTM_Mode_Formatted_tm_timestamp* pVal);
void asn1SccTM_Mode_Formatted_Initialize(asn1SccTM_Mode_Formatted* pVal);

#define ERR_TM_MODE_FORMATTED		1031  /**/
#define ERR_TM_MODE_FORMATTED_TM_TIMESTAMP		1016  /**/
#define ERR_TM_MODE_FORMATTED_TM_PAYLOAD_2		1026  /**/
flag asn1SccTM_Mode_Formatted_IsConstraintValid(const asn1SccTM_Mode_Formatted* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TM_MODE_FORMATTED		1032  /**/
#define ERR_UPER_ENCODE_TM_MODE_FORMATTED_TM_TIMESTAMP		1017  /**/
#define ERR_UPER_ENCODE_TM_MODE_FORMATTED_TM_PAYLOAD_2		1027  /**/
#define asn1SccTM_Mode_Formatted_REQUIRED_BYTES_FOR_ENCODING       81 
#define asn1SccTM_Mode_Formatted_REQUIRED_BITS_FOR_ENCODING        648

flag asn1SccTM_Mode_Formatted_Encode(const asn1SccTM_Mode_Formatted* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TM_MODE_FORMATTED		1033  /**/
#define ERR_UPER_DECODE_TM_MODE_FORMATTED_TM_TIMESTAMP		1018  /**/
#define ERR_UPER_DECODE_TM_MODE_FORMATTED_TM_PAYLOAD_2		1028  /**/
flag asn1SccTM_Mode_Formatted_Decode(asn1SccTM_Mode_Formatted* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    asn1Sccopen_link = 0,
    asn1Sccclose_link = 1,
    asn1Sccrequest_hk = 2
} asn1SccTC_Type;

// please use the following macros to avoid breaking code.
#define asn1SccTC_Type_open_link asn1Sccopen_link
#define asn1SccTC_Type_close_link asn1Sccclose_link
#define asn1SccTC_Type_request_hk asn1Sccrequest_hk

void asn1SccTC_Type_Initialize(asn1SccTC_Type* pVal);

#define ERR_TC_TYPE		196  /**/
flag asn1SccTC_Type_IsConstraintValid(const asn1SccTC_Type* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TC_TYPE		197  /**/
#define asn1SccTC_Type_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccTC_Type_REQUIRED_BITS_FOR_ENCODING        2

flag asn1SccTC_Type_Encode(const asn1SccTC_Type* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TC_TYPE		198  /**/
flag asn1SccTC_Type_Decode(asn1SccTC_Type* pVal, BitStream* pBitStrm, int* pErrCode);
typedef struct {
    int nCount; 
    
    byte arr[80];
} asn1SccTM_Error_Contents;


void asn1SccTM_Error_Contents_Initialize(asn1SccTM_Error_Contents* pVal);

#define ERR_TM_ERROR_CONTENTS		481  /**/
flag asn1SccTM_Error_Contents_IsConstraintValid(const asn1SccTM_Error_Contents* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TM_ERROR_CONTENTS		482  /**/
#define asn1SccTM_Error_Contents_REQUIRED_BYTES_FOR_ENCODING       81 
#define asn1SccTM_Error_Contents_REQUIRED_BITS_FOR_ENCODING        647

flag asn1SccTM_Error_Contents_Encode(const asn1SccTM_Error_Contents* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TM_ERROR_CONTENTS		483  /**/
flag asn1SccTM_Error_Contents_Decode(asn1SccTM_Error_Contents* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccTM_Error --------------------------------------------*/
typedef struct {
    asn1SccT_UInt64 tm_timestamp;
    asn1SccTM_Error_Contents tm_payload;

} asn1SccTM_Error;

void asn1SccTM_Error_Initialize(asn1SccTM_Error* pVal);

#define ERR_TM_ERROR		511  /**/
#define ERR_TM_ERROR_TM_TIMESTAMP_2_2		496  /**/
#define ERR_TM_ERROR_TM_PAYLOAD_2		506  /**/
flag asn1SccTM_Error_IsConstraintValid(const asn1SccTM_Error* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TM_ERROR		512  /**/
#define ERR_UPER_ENCODE_TM_ERROR_TM_TIMESTAMP_2_2		497  /**/
#define ERR_UPER_ENCODE_TM_ERROR_TM_PAYLOAD_2		507  /**/
#define asn1SccTM_Error_REQUIRED_BYTES_FOR_ENCODING       85 
#define asn1SccTM_Error_REQUIRED_BITS_FOR_ENCODING        679

flag asn1SccTM_Error_Encode(const asn1SccTM_Error* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TM_ERROR		513  /**/
#define ERR_UPER_DECODE_TM_ERROR_TM_TIMESTAMP_2_2		498  /**/
#define ERR_UPER_DECODE_TM_ERROR_TM_PAYLOAD_2		508  /**/
flag asn1SccTM_Error_Decode(asn1SccTM_Error* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccTM_Type --------------------------------------------*/

typedef enum {
    TM_Type_NONE,
    TM_Type_hello_PRESENT,
    TM_Type_hk_PRESENT,
    TM_Type_mode_PRESENT,
    TM_Type_err_PRESENT 
} asn1SccTM_Type_selection;


typedef struct {
    asn1SccTM_Type_selection kind;
    
    union {
        asn1SccTM_Hello hello;
        asn1SccTM_Housekeeping hk;
        asn1SccTM_Mode mode;
        asn1SccTM_Error err;
    } u; 
} asn1SccTM_Type;

void asn1SccTM_Type_Initialize(asn1SccTM_Type* pVal);

#define ERR_TM_TYPE		776  /**/
#define ERR_TM_TYPE_HELLO_2		601  /**/
#define ERR_TM_TYPE_HK_2		701  /**/
#define ERR_TM_TYPE_MODE_2		736  /**/
#define ERR_TM_TYPE_ERR_2		771  /**/
flag asn1SccTM_Type_IsConstraintValid(const asn1SccTM_Type* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TM_TYPE		777  /**/
#define ERR_UPER_ENCODE_TM_TYPE_HELLO_2		602  /**/
#define ERR_UPER_ENCODE_TM_TYPE_HK_2		702  /**/
#define ERR_UPER_ENCODE_TM_TYPE_MODE_2		737  /**/
#define ERR_UPER_ENCODE_TM_TYPE_ERR_2		772  /**/
#define asn1SccTM_Type_REQUIRED_BYTES_FOR_ENCODING       86 
#define asn1SccTM_Type_REQUIRED_BITS_FOR_ENCODING        681

flag asn1SccTM_Type_Encode(const asn1SccTM_Type* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TM_TYPE		778  /**/
#define ERR_UPER_DECODE_TM_TYPE_HELLO_2		603  /**/
#define ERR_UPER_DECODE_TM_TYPE_HK_2		703  /**/
#define ERR_UPER_DECODE_TM_TYPE_MODE_2		738  /**/
#define ERR_UPER_DECODE_TM_TYPE_ERR_2		773  /**/
flag asn1SccTM_Type_Decode(asn1SccTM_Type* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccTM_Error_Formatted --------------------------------------------*/
typedef struct {
    int nCount; 
    
    byte arr[80];
} asn1SccTM_Error_Formatted_tm_timestamp;

typedef struct {
    asn1SccTM_Error_Formatted_tm_timestamp tm_timestamp;
    asn1SccTM_Error_Contents tm_payload;

} asn1SccTM_Error_Formatted;

void asn1SccTM_Error_Formatted_tm_timestamp_Initialize(asn1SccTM_Error_Formatted_tm_timestamp* pVal);
void asn1SccTM_Error_Formatted_Initialize(asn1SccTM_Error_Formatted* pVal);

#define ERR_TM_ERROR_FORMATTED		1051  /**/
#define ERR_TM_ERROR_FORMATTED_TM_TIMESTAMP		1036  /**/
#define ERR_TM_ERROR_FORMATTED_TM_PAYLOAD_2		1046  /**/
flag asn1SccTM_Error_Formatted_IsConstraintValid(const asn1SccTM_Error_Formatted* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TM_ERROR_FORMATTED		1052  /**/
#define ERR_UPER_ENCODE_TM_ERROR_FORMATTED_TM_TIMESTAMP		1037  /**/
#define ERR_UPER_ENCODE_TM_ERROR_FORMATTED_TM_PAYLOAD_2		1047  /**/
#define asn1SccTM_Error_Formatted_REQUIRED_BYTES_FOR_ENCODING       162 
#define asn1SccTM_Error_Formatted_REQUIRED_BITS_FOR_ENCODING        1294

flag asn1SccTM_Error_Formatted_Encode(const asn1SccTM_Error_Formatted* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TM_ERROR_FORMATTED		1053  /**/
#define ERR_UPER_DECODE_TM_ERROR_FORMATTED_TM_TIMESTAMP		1038  /**/
#define ERR_UPER_DECODE_TM_ERROR_FORMATTED_TM_PAYLOAD_2		1048  /**/
flag asn1SccTM_Error_Formatted_Decode(asn1SccTM_Error_Formatted* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccTM_Type_Formatted --------------------------------------------*/

typedef enum {
    TM_Type_Formatted_NONE,
    TM_Type_Formatted_hello_PRESENT,
    TM_Type_Formatted_hk_PRESENT,
    TM_Type_Formatted_mode_PRESENT,
    TM_Type_Formatted_err_PRESENT 
} asn1SccTM_Type_Formatted_selection;


typedef struct {
    asn1SccTM_Type_Formatted_selection kind;
    
    union {
        asn1SccTM_Hello_Formatted hello;
        asn1SccTM_Housekeeping_Formatted hk;
        asn1SccTM_Mode_Formatted mode;
        asn1SccTM_Error_Formatted err;
    } u; 
} asn1SccTM_Type_Formatted;

void asn1SccTM_Type_Formatted_Initialize(asn1SccTM_Type_Formatted* pVal);

#define ERR_TM_TYPE_FORMATTED		1236  /**/
#define ERR_TM_TYPE_FORMATTED_HELLO_2		1111  /**/
#define ERR_TM_TYPE_FORMATTED_HK_2		1181  /**/
#define ERR_TM_TYPE_FORMATTED_MODE_2		1206  /**/
#define ERR_TM_TYPE_FORMATTED_ERR_2		1231  /**/
flag asn1SccTM_Type_Formatted_IsConstraintValid(const asn1SccTM_Type_Formatted* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_TM_TYPE_FORMATTED		1237  /**/
#define ERR_UPER_ENCODE_TM_TYPE_FORMATTED_HELLO_2		1112  /**/
#define ERR_UPER_ENCODE_TM_TYPE_FORMATTED_HK_2		1182  /**/
#define ERR_UPER_ENCODE_TM_TYPE_FORMATTED_MODE_2		1207  /**/
#define ERR_UPER_ENCODE_TM_TYPE_FORMATTED_ERR_2		1232  /**/
#define asn1SccTM_Type_Formatted_REQUIRED_BYTES_FOR_ENCODING       509 
#define asn1SccTM_Type_Formatted_REQUIRED_BITS_FOR_ENCODING        4069

flag asn1SccTM_Type_Formatted_Encode(const asn1SccTM_Type_Formatted* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_TM_TYPE_FORMATTED		1238  /**/
#define ERR_UPER_DECODE_TM_TYPE_FORMATTED_HELLO_2		1113  /**/
#define ERR_UPER_DECODE_TM_TYPE_FORMATTED_HK_2		1183  /**/
#define ERR_UPER_DECODE_TM_TYPE_FORMATTED_MODE_2		1208  /**/
#define ERR_UPER_DECODE_TM_TYPE_FORMATTED_ERR_2		1233  /**/
flag asn1SccTM_Type_Formatted_Decode(asn1SccTM_Type_Formatted* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int32;


void asn1SccT_Int32_Initialize(asn1SccT_Int32* pVal);

#define ERR_T_INT32		1241  /**/
flag asn1SccT_Int32_IsConstraintValid(const asn1SccT_Int32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT32		1242  /**/
#define asn1SccT_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_Int32_Encode(const asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		1243  /**/
flag asn1SccT_Int32_Decode(asn1SccT_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt32;


void asn1SccT_UInt32_Initialize(asn1SccT_UInt32* pVal);

#define ERR_T_UINT32		1246  /**/
flag asn1SccT_UInt32_IsConstraintValid(const asn1SccT_UInt32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT32		1247  /**/
#define asn1SccT_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define asn1SccT_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag asn1SccT_UInt32_Encode(const asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		1248  /**/
flag asn1SccT_UInt32_Decode(asn1SccT_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint asn1SccT_Int8;


void asn1SccT_Int8_Initialize(asn1SccT_Int8* pVal);

#define ERR_T_INT8		1251  /**/
flag asn1SccT_Int8_IsConstraintValid(const asn1SccT_Int8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT8		1252  /**/
#define asn1SccT_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_Int8_Encode(const asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		1253  /**/
flag asn1SccT_Int8_Decode(asn1SccT_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint asn1SccT_UInt8;


void asn1SccT_UInt8_Initialize(asn1SccT_UInt8* pVal);

#define ERR_T_UINT8		1256  /**/
flag asn1SccT_UInt8_IsConstraintValid(const asn1SccT_UInt8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT8		1257  /**/
#define asn1SccT_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag asn1SccT_UInt8_Encode(const asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		1258  /**/
flag asn1SccT_UInt8_Decode(asn1SccT_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag asn1SccT_Boolean;


void asn1SccT_Boolean_Initialize(asn1SccT_Boolean* pVal);

#define ERR_T_BOOLEAN		1261  /**/
flag asn1SccT_Boolean_IsConstraintValid(const asn1SccT_Boolean* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_BOOLEAN		1262  /**/
#define asn1SccT_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define asn1SccT_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag asn1SccT_Boolean_Encode(const asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		1263  /**/
flag asn1SccT_Boolean_Decode(asn1SccT_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- asn1SccT_Null_Record --------------------------------------------*/
typedef struct {

} asn1SccT_Null_Record;

void asn1SccT_Null_Record_Initialize(asn1SccT_Null_Record* pVal);

#define ERR_T_NULL_RECORD		1266  /**/
flag asn1SccT_Null_Record_IsConstraintValid(const asn1SccT_Null_Record* pVal, int* pErrCode);

#define asn1SccT_Null_Record_REQUIRED_BYTES_FOR_ENCODING       0 
#define asn1SccT_Null_Record_REQUIRED_BITS_FOR_ENCODING        0

flag asn1SccT_Null_Record_Encode(const asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag asn1SccT_Null_Record_Decode(asn1SccT_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

extern const asn1SccSint hk_size;
extern const asn1SccSint msg_size; 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
