pragma Style_Checks (Off);
--  Code automatically generated by asn1scc tool
with adaasn1rtl;


pragma Warnings (Off, "unit ""System"" is not referenced");
with System;
pragma Warnings (On, "unit ""System"" is not referenced");

pragma Warnings (Off, "use clause for package ""adaasn1rtl"" has no effect");
use adaasn1rtl;
pragma Warnings (On, "use clause for package ""adaasn1rtl"" has no effect");

pragma Warnings (Off, "use clause for type");
pragma Warnings (Off, "is already use-visible through package use clause at line");
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
pragma Warnings (On, "use clause for type");
pragma Warnings (On, "is already use-visible through package use clause at line");



package NATIVE_IMPLEMENTATION_DATAVIEW with SPARK_Mode
is


subtype asn1SccT_UInt16 is adaasn1rtl.Asn1UInt range 0 .. 65535;


function asn1SccT_UInt16_Equal(val1, val2 : asn1SccT_UInt16) return Boolean;

function asn1SccT_UInt16_Init return asn1SccT_UInt16;

ERR_T_UINT16:constant Integer := 1; 
function asn1SccT_UInt16_IsConstraintValid(val : asn1SccT_UInt16) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccAnalog_Data is asn1SccT_UInt16 range 0 .. 65535;


function asn1SccAnalog_Data_Equal(val1, val2 : asn1SccAnalog_Data) return Boolean;

function asn1SccAnalog_Data_Init return asn1SccAnalog_Data;

ERR_ANALOG_DATA_2:constant Integer := 91; 
function asn1SccAnalog_Data_IsConstraintValid(val : asn1SccAnalog_Data) return adaasn1rtl.ASN1_RESULT;
-- asn1SccAnalog_Data_Table --------------------------------------------

type asn1SccAnalog_Data_Table is record 
    obc_t : asn1SccT_UInt16;
    obc_v : asn1SccT_UInt16;
end record;


function asn1SccAnalog_Data_Table_Equal(val1, val2 : asn1SccAnalog_Data_Table) return Boolean;

function asn1SccAnalog_Data_Table_Init return asn1SccAnalog_Data_Table;

ERR_ANALOG_DATA_TABLE:constant Integer := 126; 
ERR_ANALOG_DATA_TABLE_OBC_T_2_2:constant Integer := 106; 
ERR_ANALOG_DATA_TABLE_OBC_V_2_2:constant Integer := 121; 
function asn1SccAnalog_Data_Table_IsConstraintValid(val : asn1SccAnalog_Data_Table) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccT_UInt64 is adaasn1rtl.Asn1UInt range 0 .. 4294967295;


function asn1SccT_UInt64_Equal(val1, val2 : asn1SccT_UInt64) return Boolean;

function asn1SccT_UInt64_Init return asn1SccT_UInt64;

ERR_T_UINT64:constant Integer := 6; 
function asn1SccT_UInt64_IsConstraintValid(val : asn1SccT_UInt64) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccMission_Time is asn1SccT_UInt64 range 0 .. 4294967295;


function asn1SccMission_Time_Equal(val1, val2 : asn1SccMission_Time) return Boolean;

function asn1SccMission_Time_Init return asn1SccMission_Time;

ERR_MISSION_TIME_2:constant Integer := 21; 
function asn1SccMission_Time_IsConstraintValid(val : asn1SccMission_Time) return adaasn1rtl.ASN1_RESULT;
-- asn1SccSatellite_State --------------------------------------------

type asn1SccSatellite_State is record 
    timestamp : asn1SccT_UInt64;
    data : asn1SccAnalog_Data_Table;
end record;


function asn1SccSatellite_State_Equal(val1, val2 : asn1SccSatellite_State) return Boolean;

function asn1SccSatellite_State_Init return asn1SccSatellite_State;

ERR_SATELLITE_STATE:constant Integer := 186; 
ERR_SATELLITE_STATE_TIMESTAMP_2_2:constant Integer := 141; 
ERR_SATELLITE_STATE_DATA_2:constant Integer := 181; 
function asn1SccSatellite_State_IsConstraintValid(val : asn1SccSatellite_State) return adaasn1rtl.ASN1_RESULT;
-- asn1SccTM_Hello --------------------------------------------

type asn1SccTM_Hello is record 
    tm_timestamp : asn1SccT_UInt64;
    tm_payload : asn1SccSatellite_State;
end record;


function asn1SccTM_Hello_Equal(val1, val2 : asn1SccTM_Hello) return Boolean;

function asn1SccTM_Hello_Init return asn1SccTM_Hello;

ERR_TM_HELLO:constant Integer := 281; 
ERR_TM_HELLO_TM_TIMESTAMP_2_2:constant Integer := 211; 
ERR_TM_HELLO_TM_PAYLOAD_2:constant Integer := 276; 
function asn1SccTM_Hello_IsConstraintValid(val : asn1SccTM_Hello) return adaasn1rtl.ASN1_RESULT;
-- asn1SccTM_Housekeeping_Contents --------------------------------------------


subtype asn1SccTM_Housekeeping_Contents_index is Integer range 1..4;
type asn1SccTM_Housekeeping_Contents_array is array (asn1SccTM_Housekeeping_Contents_index) of asn1SccSatellite_State;
type asn1SccTM_Housekeeping_Contents is  record
    Data  : asn1SccTM_Housekeeping_Contents_array;
end record;

function asn1SccTM_Housekeeping_Contents_Equal(val1, val2 : asn1SccTM_Housekeeping_Contents) return Boolean;

function asn1SccTM_Housekeeping_Contents_Init return asn1SccTM_Housekeeping_Contents;

ERR_TM_HOUSEKEEPING_CONTENTS:constant Integer := 351; 
ERR_TM_HOUSEKEEPING_CONTENTS_ELM_2:constant Integer := 346; 
function asn1SccTM_Housekeeping_Contents_IsConstraintValid(val : asn1SccTM_Housekeeping_Contents) return adaasn1rtl.ASN1_RESULT;
-- asn1SccTM_Housekeeping --------------------------------------------

type asn1SccTM_Housekeeping is record 
    tm_timestamp : asn1SccT_UInt64;
    tm_payload : asn1SccTM_Housekeeping_Contents;
end record;


function asn1SccTM_Housekeeping_Equal(val1, val2 : asn1SccTM_Housekeeping) return Boolean;

function asn1SccTM_Housekeeping_Init return asn1SccTM_Housekeeping;

ERR_TM_HOUSEKEEPING:constant Integer := 446; 
ERR_TM_HOUSEKEEPING_TM_TIMESTAMP_2_2:constant Integer := 366; 
ERR_TM_HOUSEKEEPING_TM_PAYLOAD_2:constant Integer := 441; 
function asn1SccTM_Housekeeping_IsConstraintValid(val : asn1SccTM_Housekeeping) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccT_Float is adaasn1rtl.Asn1Real;


function asn1SccT_Float_Equal(val1, val2 : asn1SccT_Float) return Boolean;

function asn1SccT_Float_Init return asn1SccT_Float;

ERR_T_FLOAT:constant Integer := 11; 
function asn1SccT_Float_IsConstraintValid(val : asn1SccT_Float) return adaasn1rtl.ASN1_RESULT;
-- asn1SccT_B_b_T --------------------------------------------


subtype asn1SccT_B_b_T_index is Integer range 1..15;
type asn1SccT_B_b_T_array is array (asn1SccT_B_b_T_index) of asn1SccT_Float;
type asn1SccT_B_b_T is  record
    Data  : asn1SccT_B_b_T_array;
end record;

function asn1SccT_B_b_T_Equal(val1, val2 : asn1SccT_B_b_T) return Boolean;

function asn1SccT_B_b_T_Init return asn1SccT_B_b_T;

ERR_T_B_B_T:constant Integer := 36; 
ERR_T_B_B_T_ELM_2:constant Integer := 31; 
function asn1SccT_B_b_T_IsConstraintValid(val : asn1SccT_B_b_T) return adaasn1rtl.ASN1_RESULT;
-- asn1SccT_Omega --------------------------------------------


subtype asn1SccT_Omega_index is Integer range 1..3;
type asn1SccT_Omega_array is array (asn1SccT_Omega_index) of asn1SccT_Float;
type asn1SccT_Omega is  record
    Data  : asn1SccT_Omega_array;
end record;

function asn1SccT_Omega_Equal(val1, val2 : asn1SccT_Omega) return Boolean;

function asn1SccT_Omega_Init return asn1SccT_Omega;

ERR_T_OMEGA:constant Integer := 51; 
ERR_T_OMEGA_ELM_2:constant Integer := 46; 
function asn1SccT_Omega_IsConstraintValid(val : asn1SccT_Omega) return adaasn1rtl.ASN1_RESULT;
-- asn1SccT_MT_Working --------------------------------------------


subtype asn1SccT_MT_Working_index is Integer range 1..3;
type asn1SccT_MT_Working_array is array (asn1SccT_MT_Working_index) of asn1SccT_Float;
type asn1SccT_MT_Working is  record
    Data  : asn1SccT_MT_Working_array;
end record;

function asn1SccT_MT_Working_Equal(val1, val2 : asn1SccT_MT_Working) return Boolean;

function asn1SccT_MT_Working_Init return asn1SccT_MT_Working;

ERR_T_MT_WORKING:constant Integer := 66; 
ERR_T_MT_WORKING_ELM_2:constant Integer := 61; 
function asn1SccT_MT_Working_IsConstraintValid(val : asn1SccT_MT_Working) return adaasn1rtl.ASN1_RESULT;
-- asn1SccT_Control --------------------------------------------


subtype asn1SccT_Control_index is Integer range 1..3;
type asn1SccT_Control_array is array (asn1SccT_Control_index) of asn1SccT_Float;
type asn1SccT_Control is  record
    Data  : asn1SccT_Control_array;
end record;

function asn1SccT_Control_Equal(val1, val2 : asn1SccT_Control) return Boolean;

function asn1SccT_Control_Init return asn1SccT_Control;

ERR_T_CONTROL:constant Integer := 81; 
ERR_T_CONTROL_ELM_2:constant Integer := 76; 
function asn1SccT_Control_IsConstraintValid(val : asn1SccT_Control) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccOperating_Mode_index_range is Integer range 0..1;
type asn1SccOperating_Mode is (asn1Sccidle, asn1Scccoverage) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccOperating_Mode use
    (asn1Sccidle => 0, asn1Scccoverage => 1);

function asn1SccOperating_Mode_Equal(val1, val2 : asn1SccOperating_Mode) return Boolean;

function asn1SccOperating_Mode_Init return asn1SccOperating_Mode;

ERR_OPERATING_MODE:constant Integer := 191; 
function asn1SccOperating_Mode_IsConstraintValid(val : asn1SccOperating_Mode) return adaasn1rtl.ASN1_RESULT;
-- asn1SccTM_Mode --------------------------------------------

type asn1SccTM_Mode is record 
    tm_timestamp : asn1SccT_UInt64;
    tm_payload : asn1SccOperating_Mode;
end record;


function asn1SccTM_Mode_Equal(val1, val2 : asn1SccTM_Mode) return Boolean;

function asn1SccTM_Mode_Init return asn1SccTM_Mode;

ERR_TM_MODE:constant Integer := 476; 
ERR_TM_MODE_TM_TIMESTAMP_2_2:constant Integer := 461; 
ERR_TM_MODE_TM_PAYLOAD_2:constant Integer := 471; 
function asn1SccTM_Mode_IsConstraintValid(val : asn1SccTM_Mode) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccTC_Type_index_range is Integer range 0..2;
type asn1SccTC_Type is (asn1Sccopen_link, asn1Sccclose_link, asn1Sccrequest_hk) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccTC_Type use
    (asn1Sccopen_link => 0, asn1Sccclose_link => 1, asn1Sccrequest_hk => 2);

function asn1SccTC_Type_Equal(val1, val2 : asn1SccTC_Type) return Boolean;

function asn1SccTC_Type_Init return asn1SccTC_Type;

ERR_TC_TYPE:constant Integer := 196; 
function asn1SccTC_Type_IsConstraintValid(val : asn1SccTC_Type) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccTM_Error_Contents_index is Integer range 1..80;
subtype asn1SccTM_Error_Contents_array is adaasn1rtl.OctetBuffer(asn1SccTM_Error_Contents_index);
subtype asn1SccTM_Error_Contents_length_index is Integer range 0..80;
type asn1SccTM_Error_Contents is  record
    Length : asn1SccTM_Error_Contents_length_index;
    Data  : asn1SccTM_Error_Contents_array;
end record;

function asn1SccTM_Error_Contents_Equal(val1, val2 : asn1SccTM_Error_Contents) return Boolean;

function asn1SccTM_Error_Contents_Init return asn1SccTM_Error_Contents;

ERR_TM_ERROR_CONTENTS:constant Integer := 481; 
function asn1SccTM_Error_Contents_IsConstraintValid(val : asn1SccTM_Error_Contents) return adaasn1rtl.ASN1_RESULT;
-- asn1SccTM_Error --------------------------------------------

type asn1SccTM_Error is record 
    tm_timestamp : asn1SccT_UInt64;
    tm_payload : asn1SccTM_Error_Contents;
end record;


function asn1SccTM_Error_Equal(val1, val2 : asn1SccTM_Error) return Boolean;

function asn1SccTM_Error_Init return asn1SccTM_Error;

ERR_TM_ERROR:constant Integer := 511; 
ERR_TM_ERROR_TM_TIMESTAMP_2_2:constant Integer := 496; 
ERR_TM_ERROR_TM_PAYLOAD_2:constant Integer := 506; 
function asn1SccTM_Error_IsConstraintValid(val : asn1SccTM_Error) return adaasn1rtl.ASN1_RESULT;
-- asn1SccTM_Type --------------------------------------------

subtype asn1SccTM_Type_index_range is Integer range 0..3;

type asn1SccTM_Type_selection is (hello_PRESENT, hk_PRESENT, mode_PRESENT, err_PRESENT);
for asn1SccTM_Type_selection use
    (hello_PRESENT => 1, hk_PRESENT => 2, mode_PRESENT => 3, err_PRESENT => 4);
for asn1SccTM_Type_selection'Size use 32;

type asn1SccTM_Type(kind : asn1SccTM_Type_selection:= hello_PRESENT) is 
record
    case kind is
    when hello_PRESENT =>
            hello: asn1SccTM_Hello;
    when hk_PRESENT =>
            hk: asn1SccTM_Housekeeping;
    when mode_PRESENT =>
            mode: asn1SccTM_Mode;
    when err_PRESENT =>
            err: asn1SccTM_Error;
    end case;
end record;

for asn1SccTM_Type use 
record
    kind at 0 range 0..31;
end record;

function asn1SccTM_Type_Equal(val1, val2 : asn1SccTM_Type) return Boolean;

function asn1SccTM_Type_Init return asn1SccTM_Type;

ERR_TM_TYPE:constant Integer := 776; 
ERR_TM_TYPE_HELLO_2:constant Integer := 601; 
ERR_TM_TYPE_HK_2:constant Integer := 701; 
ERR_TM_TYPE_MODE_2:constant Integer := 736; 
ERR_TM_TYPE_ERR_2:constant Integer := 771; 
function asn1SccTM_Type_IsConstraintValid(val : asn1SccTM_Type) return adaasn1rtl.ASN1_RESULT;
pragma Warnings (Off, "there are no others");
hk_size : constant adaasn1rtl.Asn1Int:= 4;
msg_size : constant adaasn1rtl.Asn1Int:= 80; 
pragma Warnings (On, "there are no others");
private
   --# hide NATIVE_IMPLEMENTATION_DATAVIEW;


end NATIVE_IMPLEMENTATION_DATAVIEW;